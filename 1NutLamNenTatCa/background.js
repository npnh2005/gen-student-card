// Background script - x·ª≠ l√Ω logic ch√≠nh
let currentStudentInfo = {
  country: "India", // Th√™m country field
  school: "ƒê·∫°i h·ªçc B√°ch khoa TP.HCM",
  firstName: "Lan",
  lastName: "Phuong", 
  email: "lan.phuong@hcmut.edu.vn"
};

chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
  if (request.action === "startVerification") {
    // S·ª≠ d·ª•ng studentInfo t·ª´ request n·∫øu c√≥
    if (request.studentInfo) {
      currentStudentInfo = request.studentInfo;
      console.log('ƒê√£ c·∫≠p nh·∫≠t th√¥ng tin student t·ª´ website:', currentStudentInfo);
    }
    startStudentVerification();
    sendResponse({success: true});
  } else if (request.action === "startDirectVerification") {
    // X·ª≠ l√Ω verification tr·ª±c ti·∫øp t·ª´ popup extension
    console.log('Starting DIRECT verification with:', request.studentInfo);
    
    currentStudentInfo = request.studentInfo;
    
    // Save student info m√† kh√¥ng c√≥ auto-filled flag
    chrome.storage.sync.set({
      studentInfo: request.studentInfo,
      autoFilled: false,
      lastUpdated: Date.now()
    });
    
    startStudentVerification();
    sendResponse({success: true});
  } else if (request.action === "updateStudentInfo") {
    currentStudentInfo = request.studentInfo;
    sendResponse({success: true});
  } else if (request.action === "saveStudentInfo") {
    // L∆∞u th√¥ng tin student t·ª´ website v√†o storage
    currentStudentInfo = request.studentInfo;
    chrome.storage.sync.set({ 
      studentInfo: currentStudentInfo,
      autoFilled: true,
      lastUpdated: new Date().toISOString()
    });
    console.log('ƒê√£ l∆∞u th√¥ng tin student t·ª´ website:', currentStudentInfo);
    sendResponse({success: true});
  }
});

// B∆∞·ªõc 2: M·ªü trang Google One
function startStudentVerification() {
  chrome.tabs.create({ 
    url: 'https://one.google.com/u/1/ai-student' 
  }, (tab) => {
    console.log('ƒê√£ m·ªü trang Google One, tabId:', tab.id);
    console.log('S·ª≠ d·ª•ng th√¥ng tin student:', currentStudentInfo);
    
    // ƒê·ª£i trang load xong r·ªìi click n√∫t x√°c minh
    setTimeout(() => {
      clickVerifyButton(tab.id);
    }, 3000);
  });
}

// B∆∞·ªõc 3: Click n√∫t "X√°c minh ƒëi·ªÅu ki·ªán s·ª≠ d·ª•ng"
function clickVerifyButton(tabId) {
  chrome.scripting.executeScript({
    target: { tabId: tabId },
    func: () => {
      // Th·ª≠ nhi·ªÅu selector kh√°c nhau ƒë·ªÉ t√¨m n√∫t
      const selectors = [
        '[aria-label*="X√°c minh ƒëi·ªÅu ki·ªán s·ª≠ d·ª•ng"]',
        '[aria-label*="Verify eligibility"]',
        'button:has-text("X√°c minh ƒëi·ªÅu ki·ªán s·ª≠ d·ª•ng")',
        'button[data-testid*="verify"]',
        'a[href*="verify"]'
      ];
      
      for (const selector of selectors) {
        const button = document.querySelector(selector);
        if (button) {
          console.log('T√¨m th·∫•y n√∫t x√°c minh:', button);
          button.click();
          return;
        }
      }
      
      // N·∫øu kh√¥ng t√¨m th·∫•y, th·ª≠ t√¨m theo text content
      const buttons = document.querySelectorAll('button, a');
      for (const btn of buttons) {
        if (btn.textContent.includes('X√°c minh') || 
            btn.textContent.includes('Verify') ||
            btn.textContent.includes('verify')) {
          console.log('T√¨m th·∫•y n√∫t theo text:', btn.textContent);
          btn.click();
          return;
        }
      }
      
      console.log('Kh√¥ng t√¨m th·∫•y n√∫t x√°c minh');
    }
  }).catch(err => {
    console.error('L·ªói khi click n√∫t x√°c minh:', err);
  });
}

// B∆∞·ªõc 4: L·∫Øng nghe tab m·ªõi m·ªü (SheerID)
chrome.tabs.onUpdated.addListener((tabId, changeInfo, tab) => {
  if (changeInfo.status === 'complete' && 
      tab.url && 
      (tab.url.includes("sheerid.com") || tab.url.includes("services.sheerid.com"))) {
    
    console.log('Ph√°t hi·ªán trang SheerID:', tab.url);
    
    // Ki·ªÉm tra xem c√≥ ph·∫£i l√† trang verification form kh√¥ng
    if (tab.url.includes('/verify/')) {
      console.log('üîç ƒê√£ ph√°t hi·ªán trang verification form, ƒë·ª£i trang load ho√†n to√†n...');
      
      // ƒê·ª£i trang load ho√†n to√†n v·ªõi timeout d√†i h∆°n v√† ki·ªÉm tra nhi·ªÅu l·∫ßn
      waitForPageFullyLoaded(tabId).then(() => {
        console.log('‚úÖ Trang ƒë√£ load ho√†n to√†n, b·∫Øt ƒë·∫ßu ƒëi·ªÅn form...');
        fillSheerIDForm(tabId);
      }).catch(err => {
        console.error('‚ùå Timeout waiting for page to load, trying anyway:', err);
        fillSheerIDForm(tabId);
      });
    }
  }
});

// H√†m ƒë·ª£i trang load ho√†n to√†n v·ªõi ki·ªÉm tra th·ª±c t·∫ø
async function waitForPageFullyLoaded(tabId, maxWaitTime = 10000) {
  return new Promise((resolve, reject) => {
    let attempts = 0;
    const maxAttempts = Math.floor(maxWaitTime / 500); // Check every 500ms
    
    const checkPageReady = () => {
      attempts++;
      
      chrome.scripting.executeScript({
        target: { tabId: tabId },
        func: () => {
          // Ki·ªÉm tra c√°c ƒëi·ªÅu ki·ªán ƒë·ªÉ x√°c ƒë·ªãnh trang ƒë√£ load xong
          const checks = {
            documentReady: document.readyState === 'complete',
            hasFormElements: document.querySelectorAll('input, select, textarea').length > 0,
            noLoadingIndicators: document.querySelectorAll('[class*="loading"], [class*="spinner"], [id*="loading"]').length === 0,
            hasSheerIDForm: document.querySelectorAll('[name*="school"], [name*="firstName"], [name*="lastName"]').length >= 2,
            jQueryReady: typeof window.jQuery !== 'undefined' ? window.jQuery.isReady : true
          };
          
          console.log('üîç Page readiness checks:', checks);
          
          // Trang ƒë∆∞·ª£c coi l√† ready n·∫øu:
          // 1. Document ready
          // 2. C√≥ form elements 
          // 3. Kh√¥ng c√≥ loading indicators
          const isReady = checks.documentReady && checks.hasFormElements && checks.noLoadingIndicators;
          
          return {
            ready: isReady,
            checks: checks,
            url: window.location.href,
            timestamp: new Date().toISOString()
          };
        }
      }).then(results => {
        if (results && results[0] && results[0].result) {
          const result = results[0].result;
          console.log(`üîç Page readiness check ${attempts}/${maxAttempts}:`, result);
          
          if (result.ready) {
            console.log('‚úÖ Trang ƒë√£ s·∫µn s√†ng ƒë·ªÉ ƒëi·ªÅn form');
            resolve();
            return;
          }
        }
        
        if (attempts >= maxAttempts) {
          console.log('‚è∞ Timeout waiting for page readiness, proceeding anyway');
          reject(new Error('Timeout waiting for page to be ready'));
          return;
        }
        
        // Check l·∫°i sau 500ms
        setTimeout(checkPageReady, 500);
      }).catch(err => {
        console.error('‚ùå Error checking page readiness:', err);
        if (attempts >= maxAttempts) {
          reject(err);
        } else {
          setTimeout(checkPageReady, 500);
        }
      });
    };
    
    // B·∫Øt ƒë·∫ßu check
    checkPageReady();
  });
}

// L·∫Øng nghe tab m·ªõi ƒë∆∞·ª£c t·∫°o (cho sign-in)
chrome.tabs.onCreated.addListener((tab) => {
  console.log('Tab m·ªõi ƒë∆∞·ª£c t·∫°o:', tab.id);
  
  // ƒê·ª£i tab load xong r·ªìi check URL
  setTimeout(() => {
    chrome.tabs.get(tab.id, (updatedTab) => {
      if (updatedTab && updatedTab.url && 
          (updatedTab.url.includes('login') || 
           updatedTab.url.includes('signin') || 
           updatedTab.url.includes('auth') ||
           updatedTab.url.includes('sso'))) {
        
        console.log('üîç Ph√°t hi·ªán tab sign-in:', updatedTab.url);
        console.log('üö™ ƒê√≥ng tab sign-in sau 3 gi√¢y...');
        
        // ƒê√≥ng tab sau 3 gi√¢y
        setTimeout(() => {
          chrome.tabs.remove(tab.id, () => {
            console.log('‚úÖ ƒê√£ ƒë√≥ng tab sign-in');
          });
        }, 3000);
      }
    });
  }, 2000);
});

// B∆∞·ªõc 5: X·ª≠ l√Ω sau khi submit form - t√¨m n√∫t "Sign in to your school" ho·∫∑c "Upload Proof of Enrollment"
function handlePostSubmit(tabId) {
  chrome.scripting.executeScript({
    target: { tabId: tabId },
    func: () => {
      console.log('üîç T√¨m n√∫t "Sign in to your school" ho·∫∑c "Upload Proof of Enrollment"...');
      
      function findAndClickButton() {
        // T√¨m n√∫t "Upload Proof of Enrollment" tr∆∞·ªõc
        const uploadSelectors = [
          'button:contains("Upload Proof of Enrollment")',
          'a:contains("Upload Proof of Enrollment")',
          '[aria-label*="Upload Proof of Enrollment"]',
          'button[title*="Upload Proof of Enrollment"]'
        ];
        
        let uploadBtn = null;
        // V√¨ :contains kh√¥ng c√≥ trong querySelector, d√πng c√°ch kh√°c
        const buttons = document.querySelectorAll('button, a, [role="button"]');
        for (const btn of buttons) {
          if (btn.textContent && btn.textContent.includes('Upload Proof of Enrollment')) {
            uploadBtn = btn;
            break;
          }
        }
        
        if (uploadBtn && uploadBtn.offsetParent !== null) {
          console.log('‚úÖ T√¨m th·∫•y n√∫t "Upload Proof of Enrollment", click lu√¥n...');
          uploadBtn.click();
          console.log('‚úÖ ƒê√£ click v√†o "Upload Proof of Enrollment"');
          return true;
        }
        
        // N·∫øu kh√¥ng c√≥ "Upload Proof of Enrollment", t√¨m "Sign in to your school"
        let signinBtn = document.querySelector('#sid-submit-btn-sso');
        
        if (!signinBtn || signinBtn.offsetParent === null) {
          // Fallback: t√¨m theo text n·∫øu kh√¥ng t√¨m th·∫•y ID
          const allButtons = document.querySelectorAll('button, a, [role="button"]');
          for (const btn of allButtons) {
            if (btn.textContent && btn.textContent.includes('Sign in to your school')) {
              signinBtn = btn;
              break;
            }
          }
        }
        
        if (signinBtn && signinBtn.offsetParent !== null) {
          console.log('‚úÖ T√¨m th·∫•y n√∫t "Sign in to your school" v·ªõi ID:', signinBtn.id || 'unknown');
          
          // L·∫Øng nghe tab m·ªõi m·ªü
          let newTabId = null;
          const originalTabCount = window.chrome?.tabs?.query ? 0 : -1; // Placeholder, s·∫Ω x·ª≠ l√Ω trong background
          
          signinBtn.click();
          console.log('‚úÖ ƒê√£ click v√†o "Sign in to your school"');
          
          return 'signin_clicked';
        }
        
        return false;
      }
      
      // Th·ª≠ t√¨m ngay l·∫≠p t·ª©c
      const result = findAndClickButton();
      if (result === true) {
        return; // ƒê√£ t√¨m th·∫•y v√† click "Upload Proof of Enrollment"
      } else if (result === 'signin_clicked') {
        return; // ƒê√£ click "Sign in to your school", s·∫Ω x·ª≠ l√Ω ·ªü background
      }
      
      // N·∫øu ch∆∞a t√¨m th·∫•y, th·ª≠ l·∫°i sau m·ªôt v√†i gi√¢y
      let attempts = 0;
      const maxAttempts = 10;
      
      const retryInterval = setInterval(() => {
        attempts++;
        console.log(`üîÑ Th·ª≠ l·∫ßn ${attempts}/${maxAttempts} t√¨m n√∫t...`);
        
        const result = findAndClickButton();
        if (result === true || result === 'signin_clicked') {
          clearInterval(retryInterval);
          return;
        }
        
        if (attempts >= maxAttempts) {
          clearInterval(retryInterval);
          console.log('‚ùå Timeout - kh√¥ng t√¨m th·∫•y n√∫t "Sign in to your school" ho·∫∑c "Upload Proof of Enrollment"');
        }
      }, 1000);
    }
  }).catch(err => {
    console.error('L·ªói khi t√¨m n√∫t post-submit:', err);
  });
}

// ƒêi·ªÅn form SheerID v·ªõi c·∫£i thi·ªán timing v√† retry logic
function fillSheerIDForm(tabId) {
  chrome.scripting.executeScript({
    target: { tabId: tabId },
    func: (studentInfo) => {
      console.log('üîç DEBUG: B·∫Øt ƒë·∫ßu ƒëi·ªÅn form SheerID v·ªõi th√¥ng tin:', JSON.stringify(studentInfo, null, 2));
      
      // Validation ƒë·∫ßu v√†o
      if (!studentInfo) {
        console.error('‚ùå ERROR: studentInfo is null or undefined!');
        return;
      }
      
      // Log t·ª´ng field ƒë·ªÉ debug
      console.log('üîç DEBUG: Field values check:', {
        country: studentInfo.country,
        school: studentInfo.school,
        firstName: studentInfo.firstName,
        lastName: studentInfo.lastName,
        email: studentInfo.email,
        dateOfBirth: studentInfo.dateOfBirth
      });
      
      // H√†m ƒë·ª£i element xu·∫•t hi·ªán v·ªõi timeout
      function waitForElement(selector, timeout = 10000) {
        return new Promise((resolve, reject) => {
          const element = document.querySelector(selector);
          if (element) {
            console.log(`‚úÖ Element ƒë√£ s·∫µn s√†ng: ${selector}`);
            resolve(element);
            return;
          }
          
          const observer = new MutationObserver((mutations, obs) => {
            const element = document.querySelector(selector);
            if (element) {
              console.log(`‚úÖ Element ƒë√£ xu·∫•t hi·ªán sau mutation: ${selector}`);
              obs.disconnect();
              resolve(element);
            }
          });
          
          observer.observe(document.body, {
            childList: true,
            subtree: true
          });
          
          setTimeout(() => {
            observer.disconnect();
            reject(new Error(`Timeout waiting for element: ${selector}`));
          }, timeout);
        });
      }
      
      // H√†m ƒë·ª£i v√† ƒëi·ªÅn form v·ªõi retry logic c·∫£i ti·∫øn
      async function fillFormWithRetry() {
        const maxAttempts = 2; // Gi·∫£m t·ª´ 3 xu·ªëng 2 ƒë·ªÉ √≠t lo·∫±ng ngo·∫±ng h∆°n
        let attempt = 1;
        
        while (attempt <= maxAttempts) {
          try {
            console.log(`üîÑ Attempt ${attempt}/${maxAttempts} to fill form...`);
            
            // ƒê·ª£i c√°c elements ch√≠nh xu·∫•t hi·ªán tr∆∞·ªõc
            const mainSelectors = [
              'input[name*="school"], select[name*="school"]',
              'input[name*="firstName"], input[name*="first"]', 
              'input[name*="lastName"], input[name*="last"]',
              'input[name*="email"]'
            ];
            
            console.log('üîç ƒêang ƒë·ª£i main form elements xu·∫•t hi·ªán...');
            
            // Ki·ªÉm tra xem c√≥ √≠t nh·∫•t 2 trong 4 elements ch√≠nh
            let foundElements = 0;
            for (const selector of mainSelectors) {
              try {
                await waitForElement(selector, 3000);
                foundElements++;
              } catch (e) {
                console.log(`‚ö†Ô∏è Element not found: ${selector}`);
              }
            }
            
            if (foundElements < 2) {
              throw new Error(`Only found ${foundElements}/4 main form elements`);
            }
            
            console.log(`‚úÖ Found ${foundElements}/4 main form elements, proceeding with form fill...`);
            
            // B·∫Øt ƒë·∫ßu ƒëi·ªÅn form theo th·ª© t·ª± - kh√¥ng throw error n·∫øu m·ªôt field fail
            await fillFormFieldsWithContinue();
            
            console.log('‚úÖ Form ƒëi·ªÅn th√†nh c√¥ng!');
            break;
            
          } catch (error) {
            console.error(`‚ùå Attempt ${attempt} failed:`, error);
            
            if (attempt === maxAttempts) {
              console.error('‚ùå All attempts failed, but continuing anyway...');
              // V·∫´n c·ªë g·∫Øng ƒëi·ªÅn form d√π c√≥ l·ªói
              try {
                await fillFormFieldsWithContinue();
              } catch (e) {
                console.error('‚ùå Final attempt also failed:', e);
              }
              return;
            }
            
            attempt++;
            console.log(`üîÑ Waiting 1 second before retry...`); // Gi·∫£m t·ª´ 2s xu·ªëng 1s
            await new Promise(resolve => setTimeout(resolve, 1000));
          }
        }
      }
      
      // Main function to fill all form fields - c·∫£i ti·∫øn ƒë·ªÉ continue khi m·ªôt field fail
      async function fillFormFieldsWithContinue() {
        console.log('üìù B·∫Øt ƒë·∫ßu ƒëi·ªÅn form theo th·ª© t·ª±...');
        
        // 1. ƒêi·ªÅn Country tr∆∞·ªõc ti√™n (n·∫øu c√≥)
        if (studentInfo.country) {
          try {
            console.log('üåç B∆∞·ªõc 1: ƒêi·ªÅn Country...');
            await fillCountryField(studentInfo.country);
            await new Promise(resolve => setTimeout(resolve, 500));
            console.log('‚úÖ Country ƒëi·ªÅn th√†nh c√¥ng');
          } catch (error) {
            console.error('‚ùå Country failed, continuing...', error);
          }
        }
        
        // 2. ƒêi·ªÅn First Name
        if (studentInfo.firstName) {
          try {
            console.log('üë§ B∆∞·ªõc 2: ƒêi·ªÅn First Name...');
            await fillField('input[name*="firstName"], input[name*="first"]', studentInfo.firstName, 'First Name');
            await new Promise(resolve => setTimeout(resolve, 200));
            console.log('‚úÖ First Name ƒëi·ªÅn th√†nh c√¥ng');
          } catch (error) {
            console.error('‚ùå First Name failed, continuing...', error);
          }
        }
        
        // 3. ƒêi·ªÅn Last Name
        if (studentInfo.lastName) {
          try {
            console.log('üë§ B∆∞·ªõc 3: ƒêi·ªÅn Last Name...');
            await fillField('input[name*="lastName"], input[name*="last"]', studentInfo.lastName, 'Last Name');
            await new Promise(resolve => setTimeout(resolve, 200));
            console.log('‚úÖ Last Name ƒëi·ªÅn th√†nh c√¥ng');
          } catch (error) {
            console.error('‚ùå Last Name failed, continuing...', error);
          }
        }
        
        // 4. ƒêi·ªÅn Email
        if (studentInfo.email) {
          try {
            console.log('üìß B∆∞·ªõc 4: ƒêi·ªÅn Email...');
            await fillField('input[name*="email"], input[type="email"]', studentInfo.email, 'Email');
            await new Promise(resolve => setTimeout(resolve, 200));
            console.log('‚úÖ Email ƒëi·ªÅn th√†nh c√¥ng');
          } catch (error) {
            console.error('‚ùå Email failed, continuing...', error);
          }
        }
        
        // 5. ƒêi·ªÅn Date of Birth (n·∫øu c√≥)
        if (studentInfo.dateOfBirth) {
          try {
            console.log('üìÖ B∆∞·ªõc 5: ƒêi·ªÅn Date of Birth...');
            await fillDateOfBirth(studentInfo.dateOfBirth);
            await new Promise(resolve => setTimeout(resolve, 500));
            console.log('‚úÖ Date of Birth ƒëi·ªÅn th√†nh c√¥ng');
          } catch (error) {
            console.error('‚ùå Date of Birth failed, continuing...', error);
          }
        }
        
        // 6. ƒêi·ªÅn School cu·ªëi c√πng
        if (studentInfo.school) {
          try {
            console.log('üè´ B∆∞·ªõc 6: ƒêi·ªÅn School (cu·ªëi c√πng)...');
            await fillSchoolField(studentInfo.school);
            await new Promise(resolve => setTimeout(resolve, 300));
            console.log('‚úÖ School ƒëi·ªÅn th√†nh c√¥ng');
          } catch (error) {
            console.error('‚ùå School failed, but continuing to submit...', error);
          }
        }
        
        console.log('üìù Ho√†n th√†nh ƒëi·ªÅn form, chu·∫©n b·ªã submit...');
        
        // 7. Submit form
        setTimeout(() => {
          submitForm();
        }, 1000);
      }

      // Backup function - gi·ªØ nguy√™n cho compatibility  
      async function fillFormFields() {
        return fillFormFieldsWithContinue();
      }
      
      // Start the process
      fillFormWithRetry();
      
      // H√†m helper ƒë·ªÉ ƒëi·ªÅn field v·ªõi advanced validation (c·∫£i ti·∫øn)
      function fillField(selector, value, fieldType = 'text') {
        if (!value) {
          console.log(`‚ö†Ô∏è WARNING: Kh√¥ng c√≥ gi√° tr·ªã ƒë·ªÉ ƒëi·ªÅn cho ${fieldType}: "${selector}"`);
          return false;
        }
        
        const field = document.querySelector(selector);
        if (field) {
          console.log(`üéØ ƒêi·ªÅn ${fieldType}: ${selector} = "${value}"`);
          console.log(`üéØ Field details:`, {
            id: field.id,
            name: field.name,
            type: field.type,
            placeholder: field.placeholder,
            visible: field.offsetParent !== null,
            disabled: field.disabled,
            readonly: field.readOnly
          });
          
          // Check if field is actually visible and editable
          if (field.offsetParent === null) {
            console.log(`‚ö†Ô∏è WARNING: Field ${selector} is not visible`);
            return false;
          }
          
          if (field.disabled || field.readOnly) {
            console.log(`‚ö†Ô∏è WARNING: Field ${selector} is disabled or readonly`);
            return false;
          }
          
          // Step 1: Focus and activate field
          field.focus();
          field.click();
          
          // Step 2: Clear completely 
          field.value = '';
          field.dispatchEvent(new Event('input', { bubbles: true }));
          field.dispatchEvent(new Event('change', { bubbles: true }));
          
          // Step 3: Set value using multiple methods for compatibility
          field.value = value;
          
          // For React/modern frameworks - set property directly
          const nativeInputValueSetter = Object.getOwnPropertyDescriptor(window.HTMLInputElement.prototype, 'value').set;
          if (nativeInputValueSetter) {
            nativeInputValueSetter.call(field, value);
          }
          
          // Step 4: Trigger all validation events
          const events = [
            'input',
            'change', 
            'keydown',
            'keyup',
            'blur',
            'focusout'
          ];
          
          events.forEach(eventType => {
            field.dispatchEvent(new Event(eventType, { bubbles: true }));
          });
          
          // Step 5: Special keyboard simulation for SheerID
          const keyboardEvent = new KeyboardEvent('keyup', {
            bubbles: true,
            cancelable: true,
            key: value.slice(-1), // Last character
            code: `Key${value.slice(-1).toUpperCase()}`,
            keyCode: value.slice(-1).charCodeAt(0)
          });
          field.dispatchEvent(keyboardEvent);
          
          // Step 6: Force validation check
          setTimeout(() => {
            field.dispatchEvent(new Event('input', { bubbles: true }));
            field.dispatchEvent(new Event('blur', { bubbles: true }));
          }, 50);
          
          // Step 7: Verify value was set correctly
          setTimeout(() => {
            if (field.value === value) {
              console.log(`‚úÖ VERIFIED: ${fieldType} = "${value}" hi·ªÉn th·ªã ch√≠nh x√°c trong UI`);
            } else {
              console.log(`‚ö†Ô∏è WARNING: ${fieldType} value trong DOM = "${field.value}" kh√°c v·ªõi expected = "${value}"`);
              
              // Try to force set value again
              field.value = value;
              field.dispatchEvent(new Event('input', { bubbles: true }));
              field.dispatchEvent(new Event('change', { bubbles: true }));
              console.log(`üîÑ RETRY: ƒê√£ th·ª≠ set l·∫°i ${fieldType} value = "${value}"`);
            }
          }, 100);
          
          console.log(`‚úÖ ƒê√£ ƒëi·ªÅn ${selector}: ${value}`);
          return true;
        } else {
          console.log(`‚ùå Kh√¥ng t√¨m th·∫•y field v·ªõi selector: ${selector}`);
        }
        return false;
      }
      
      // H√†m x·ª≠ l√Ω Date of Birth v·ªõi c·∫•u tr√∫c SheerID ƒë·∫∑c bi·ªát
      async function fillDateOfBirth(dateValue) {
        if (!dateValue) return;
        
        // Parse date (format: YYYY-MM-DD)
        const dateParts = dateValue.split('-');
        if (dateParts.length !== 3) return;
        
        const year = dateParts[0];
        const monthWithZero = dateParts[1]; // "01", "02", etc.
        const month = parseInt(monthWithZero, 10).toString(); // "1", "2", etc. (remove leading zero)
        const day = dateParts[2];
        
        console.log(`ƒêang ƒëi·ªÅn Date of Birth: ${month}/${day}/${year} (month without zero: ${month})`);
        
        // 1. X·ª≠ l√Ω Month field (c√≥ dropdown gi·ªëng School) - D√πng month kh√¥ng c√≥ s·ªë 0
        await fillMonthField(month);
        
        // 2. X·ª≠ l√Ω Day field (autocomplete="bday-day")
        const daySelectors = [
          'input[name="sid-birthdate-day"]',
          'input[autocomplete="bday-day"]',
          'input[placeholder="Day"]',
          'input[aria-label="Day"]',
          'select[name*="day"]',
          'select[id*="day"]',
          'input[name*="day"]',
          'select[placeholder*="day"]',
          'select[placeholder*="ng√†y"]'
        ];
        
        for (const selector of daySelectors) {
          const dayField = document.querySelector(selector);
          if (dayField) {
            console.log(`‚úÖ T√¨m th·∫•y day field v·ªõi selector: ${selector}`, dayField);
            
            // Focus tr∆∞·ªõc khi ƒëi·ªÅn
            dayField.focus();
            
            // Clear existing value
            dayField.value = '';
            
            // Set new value
            dayField.value = day;
            
            // Trigger comprehensive events
            const events = [
              new Event('focus', { bubbles: true }),
              new Event('input', { bubbles: true, cancelable: true }),
              new Event('keydown', { bubbles: true }),
              new Event('keyup', { bubbles: true }),
              new Event('change', { bubbles: true }),
              new Event('blur', { bubbles: true })
            ];
            
            events.forEach(event => dayField.dispatchEvent(event));
            
            // Verify value was set for Day field
            setTimeout(() => {
              if (dayField.value === day) {
                console.log(`‚úÖ VERIFIED: Day = "${day}" hi·ªÉn th·ªã ch√≠nh x√°c trong UI`);
              } else {
                console.log(`‚ö†Ô∏è WARNING: Day value trong DOM = "${dayField.value}" kh√°c v·ªõi expected = "${day}"`);
                
                // Try to force set value again
                dayField.value = day;
                dayField.dispatchEvent(new Event('input', { bubbles: true }));
                dayField.dispatchEvent(new Event('change', { bubbles: true }));
                console.log(`üîÑ RETRY: ƒê√£ th·ª≠ set l·∫°i Day value = "${day}"`);
              }
            }, 200);
            
            console.log(`‚úÖ ƒê√£ ch·ªçn ng√†y: ${day} b·∫±ng selector: ${selector}`);
            break;
          }
        }
        
        // 3. X·ª≠ l√Ω Year field (autocomplete="bday-year")
        const yearSelectors = [
          'input[autocomplete="bday-year"]',
          'select[name*="year"]',
          'select[id*="year"]',
          'input[name*="year"]',
          'select[placeholder*="year"]',
          'select[placeholder*="nƒÉm"]'
        ];
        
        for (const selector of yearSelectors) {
          const yearField = document.querySelector(selector);
          if (yearField) {
            console.log(`‚úÖ T√¨m th·∫•y year field v·ªõi selector: ${selector}`, yearField);
            
            // Focus tr∆∞·ªõc khi ƒëi·ªÅn
            yearField.focus();
            
            // Clear existing value
            yearField.value = '';
            
            // Set new value
            yearField.value = year;
            
            // Trigger comprehensive events
            const events = [
              new Event('focus', { bubbles: true }),
              new Event('input', { bubbles: true, cancelable: true }),
              new Event('keydown', { bubbles: true }),
              new Event('keyup', { bubbles: true }),
              new Event('change', { bubbles: true }),
              new Event('blur', { bubbles: true })
            ];
            
            events.forEach(event => yearField.dispatchEvent(event));
            
            // Verify value was set for Year field
            setTimeout(() => {
              if (yearField.value === year) {
                console.log(`‚úÖ VERIFIED: Year = "${year}" hi·ªÉn th·ªã ch√≠nh x√°c trong UI`);
              } else {
                console.log(`‚ö†Ô∏è WARNING: Year value trong DOM = "${yearField.value}" kh√°c v·ªõi expected = "${year}"`);
              }
            }, 200);
            
            console.log(`‚úÖ ƒê√£ ch·ªçn nƒÉm: ${year} b·∫±ng selector: ${selector}`);
            break;
          }
        }
        
        // Fallback: Ch·ªâ d√πng n·∫øu kh√¥ng t√¨m th·∫•y b·∫•t k·ª≥ dropdown n√†o
        // (T·∫°m th·ªùi t·∫Øt ƒë·ªÉ tr√°nh ghi ƒë√® dropdown)
        /*
        const dateInputSelectors = [
          'input[type="date"]',
          'input[name*="birth"]',
          'input[name*="dob"]',
          'input[placeholder*="birth"]'
        ];
        
        for (const selector of dateInputSelectors) {
          const dateInput = document.querySelector(selector);
          if (dateInput) {
            dateInput.value = dateValue;
            dateInput.dispatchEvent(new Event('input', { bubbles: true }));
            dateInput.dispatchEvent(new Event('change', { bubbles: true }));
            console.log(`‚úÖ ƒê√£ ƒëi·ªÅn ng√†y sinh: ${dateValue} b·∫±ng selector: ${selector}`);
            break;
          }
        }
        */
      }
      
      // H√†m ƒë·∫∑c bi·ªát ƒë·ªÉ x·ª≠ l√Ω Month field (c√≥ dropdown nh∆∞ School)
      async function fillMonthField(monthValue) {
        const monthSelectors = [
          'input[name*="month"]',
          'input[id*="month"]',
          'select[name*="month"]',
          'select[id*="month"]',
          'input[placeholder*="month"]',
          'input[placeholder*="th√°ng"]'
        ];
        
        let monthField = null;
        for (const selector of monthSelectors) {
          monthField = document.querySelector(selector);
          if (monthField) {
            console.log(`T√¨m th·∫•y month field v·ªõi selector: ${selector}`);
            break;
          }
        }
        
        if (!monthField) {
          console.log('Kh√¥ng t√¨m th·∫•y month field');
          return false;
        }
        
        // N·∫øu l√† select dropdown th√¥ng th∆∞·ªùng
        if (monthField.tagName === 'SELECT') {
          monthField.value = monthValue;
          monthField.dispatchEvent(new Event('change', { bubbles: true }));
          console.log(`‚úÖ ƒê√£ ch·ªçn th√°ng t·ª´ select: ${monthValue}`);
          return true;
        }
        
        // N·∫øu l√† input v·ªõi dropdown (gi·ªëng School)
        if (monthField.tagName === 'INPUT') {
          // Click v√† focus
          monthField.click();
          monthField.focus();
          
          // ƒêi·ªÅn s·ªë th√°ng (kh√¥ng c√≥ leading zero)
          monthField.value = monthValue;
          
          console.log(`ƒê√£ ƒëi·ªÅn month value: "${monthValue}" (kh√¥ng c√≥ leading zero)`);
          
          // Trigger events
          const events = ['focus', 'input', 'keydown', 'keyup', 'change'];
          events.forEach(eventType => {
            monthField.dispatchEvent(new Event(eventType, { bubbles: true }));
          });
          
          // ƒê·ª£i v√† t√¨m dropdown item cho month
          return new Promise((resolve) => {
            let attempts = 0;
            const maxAttempts = 15;
            
            const checkForMonthDropdown = () => {
              attempts++;
              
              // T√¨m month dropdown item (sid-birthdate_month-item-0)
              const monthItemSelectors = [
                '.sid-birthdate_month-item-0',
                '[class*="birthdate_month-item-0"]',
                '[class*="month-item"]:first-child',
                '[id*="month-item-0"]',
                '[role="option"]:first-child'
              ];
              
              let firstMonthItem = null;
              for (const selector of monthItemSelectors) {
                firstMonthItem = document.querySelector(selector);
                if (firstMonthItem && firstMonthItem.offsetParent !== null) {
                  console.log(`T√¨m th·∫•y month item v·ªõi selector: ${selector}`);
                  break;
                }
              }
              
              if (firstMonthItem && firstMonthItem.offsetParent !== null) {
                // Hover v√† click
                firstMonthItem.dispatchEvent(new MouseEvent('mouseenter', { bubbles: true }));
                
                setTimeout(() => {
                  firstMonthItem.click();
                  console.log('‚úÖ ƒê√£ click v√†o month item ƒë·∫ßu ti√™n');
                  resolve(true);
                }, 100);
                
                return;
              }
              
              // Debug month dropdown items
              if (attempts === 5) {
                console.log('Debug: T√¨m t·∫•t c·∫£ month dropdown items:');
                const allMonthItems = document.querySelectorAll('[class*="month"], [class*="birthdate"], [role="option"]');
                allMonthItems.forEach((item, index) => {
                  if (item.offsetParent !== null) {
                    console.log(`Month item ${index}:`, {
                      text: item.textContent?.substring(0, 30),
                      classes: item.className,
                      id: item.id
                    });
                  }
                });
              }
              
              if (attempts < maxAttempts) {
                setTimeout(checkForMonthDropdown, 200);
              } else {
                console.log('Timeout - kh√¥ng t√¨m th·∫•y month dropdown');
                resolve(false);
              }
            };
            
            setTimeout(checkForMonthDropdown, 300);
          });
        }
        
        return false;
      }
      
      // H√†m ƒë·∫∑c bi·ªát ƒë·ªÉ x·ª≠ l√Ω country field v·ªõi dropdown
      async function fillCountryField(countryName = "Vietnam") {
        const countrySelectors = [
          'select[name*="country"]',
          'select[id*="country"]', 
          'input[name*="country"]',
          'input[id*="country"]',
          'input[placeholder*="country"]',
          'input[placeholder*="Country"]',
          'input[aria-label*="country"]',
          '#country',
          '#sid-country',
          '[name="sid-country"]',
          '[role="combobox"][placeholder*="country"]'
        ];
        
        let countryField = null;
        for (const selector of countrySelectors) {
          countryField = document.querySelector(selector);
          if (countryField) {
            console.log(`T√¨m th·∫•y country field v·ªõi selector: ${selector}`);
            break;
          }
        }
        
        if (!countryField) {
          console.log('Kh√¥ng t√¨m th·∫•y field country');
          return false;
        }
        
          // N·∫øu l√† select dropdown th√¥ng th∆∞·ªùng
          if (countryField.tagName === 'SELECT') {
            // T√¨m option c√≥ text ch·ª©a country name
            const options = countryField.querySelectorAll('option');
            let targetOption = null;
            
            for (const option of options) {
              const optionText = option.textContent.toLowerCase();
              const countryLower = countryName.toLowerCase();
              
              // Check exact match or contains
              if (optionText.includes(countryLower) ||
                  optionText.includes('vietnam') && countryLower.includes('vietnam') ||
                  optionText.includes('united states') && countryLower.includes('united states') ||
                  optionText.includes('usa') && countryLower.includes('united states') ||
                  optionText.includes('us') && countryLower.includes('united states') ||
                  option.value.toLowerCase().includes(countryLower)) {
                targetOption = option;
                break;
              }
            }
            
            if (targetOption) {
              countryField.value = targetOption.value;
              countryField.dispatchEvent(new Event('change', { bubbles: true }));
              console.log(`‚úÖ ƒê√£ ch·ªçn country: ${targetOption.textContent}`);
              return true;
            }
          }        // N·∫øu l√† input v·ªõi dropdown autocomplete
        if (countryField.tagName === 'INPUT') {
          // Click v√† focus
          countryField.click();
          countryField.focus();
          
          // ƒêi·ªÅn t√™n country
          countryField.value = countryName;
          
          console.log(`ƒê√£ ƒëi·ªÅn country value: "${countryName}"`);
          
          // Trigger events
          const events = ['focus', 'input', 'keydown', 'keyup', 'change'];
          events.forEach(eventType => {
            countryField.dispatchEvent(new Event(eventType, { bubbles: true }));
          });
          
          // ƒê·ª£i v√† t√¨m dropdown item cho country
          return new Promise((resolve) => {
            let attempts = 0;
            const maxAttempts = 15;
            
            const checkForCountryDropdown = () => {
              attempts++;
              
              // T√¨m country dropdown item
              const countryItemSelectors = [
                '[role="option"]',
                '.dropdown-item',
                '.autocomplete-item',
                '.list-item',
                '.suggestion',
                '.option',
                '[class*="country-item"]',
                '[id*="country-item"]'
              ];
              
              let targetItem = null;
              for (const selector of countryItemSelectors) {
                const items = document.querySelectorAll(selector);
                for (const item of items) {
                  if (item.offsetParent !== null) {
                    const itemText = item.textContent.toLowerCase();
                    const countryLower = countryName.toLowerCase();
                    
                    // Check if this item matches our target country
                    if (itemText.includes(countryLower) ||
                        (itemText.includes('vietnam') || itemText.includes('viet nam')) && countryLower.includes('vietnam') ||
                        (itemText.includes('united states') || itemText.includes('usa') || itemText.includes('america')) && countryLower.includes('united states')) {
                      targetItem = item;
                      console.log(`T√¨m th·∫•y ${countryName} item v·ªõi selector: ${selector}`);
                      break;
                    }
                  }
                }
                if (targetItem) break;
              }
              
              if (targetItem && targetItem.offsetParent !== null) {
                // Hover v√† click
                targetItem.dispatchEvent(new MouseEvent('mouseenter', { bubbles: true }));
                
                setTimeout(() => {
                  targetItem.click();
                  console.log(`‚úÖ ƒê√£ click v√†o ${countryName} item`);
                  resolve(true);
                }, 100);
                
                return;
              }
              
              // Debug country dropdown items
              if (attempts === 5) {
                console.log('Debug: T√¨m t·∫•t c·∫£ country dropdown items:');
                const allCountryItems = document.querySelectorAll('[role="option"], .dropdown-item, [class*="item"]');
                allCountryItems.forEach((item, index) => {
                  if (item.offsetParent !== null) {
                    console.log(`Country item ${index}:`, {
                      text: item.textContent?.substring(0, 50),
                      classes: item.className,
                      id: item.id
                    });
                  }
                });
              }
              
              if (attempts < maxAttempts) {
                setTimeout(checkForCountryDropdown, 200);
              } else {
                console.log('Timeout - kh√¥ng t√¨m th·∫•y country dropdown');
                resolve(false);
              }
            };
            
            setTimeout(checkForCountryDropdown, 300);
          });
        }
        
        return false;
      }

      // H√†m ƒë·∫∑c bi·ªát ƒë·ªÉ x·ª≠ l√Ω tr∆∞·ªùng h·ªçc v·ªõi dropdown (c·∫£i ti·∫øn timing)
      async function fillSchoolField(schoolName) {
        console.log(`üè´ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω school field v·ªõi t√™n: "${schoolName}"`);
        
        const schoolSelectors = [
          'input[id*="college"]',
          'input[name="school"]',
          'input[name="organization"]',
          'input[placeholder*="school"]',
          'input[placeholder*="tr∆∞·ªùng"]',
          '#school',
          '#organization',
          '[role="combobox"]',
          'input[aria-autocomplete="list"]'
        ];
        
        let schoolField = null;
        for (const selector of schoolSelectors) {
          schoolField = document.querySelector(selector);
          if (schoolField) {
            console.log(`üéØ T√¨m th·∫•y school field v·ªõi selector: ${selector}`);
            break;
          }
        }
        
        if (!schoolField) {
          console.log('‚ùå Kh√¥ng t√¨m th·∫•y field tr∆∞·ªùng h·ªçc');
          return false;
        }
        
        // B∆∞·ªõc 1: Clear field v√† focus
        console.log('üìù B∆∞·ªõc 1: Clear v√† focus v√†o school field');
        schoolField.value = '';
        schoolField.focus();
        schoolField.click();
        
        // ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ UI s·∫µn s√†ng
        await new Promise(resolve => setTimeout(resolve, 300));
        
        // B∆∞·ªõc 2: ƒêi·ªÅn t√™n tr∆∞·ªùng t·ª´ng k√Ω t·ª± ƒë·ªÉ trigger autocomplete t·ªët h∆°n
        console.log('‚å®Ô∏è B∆∞·ªõc 2: ƒêi·ªÅn t√™n tr∆∞·ªùng t·ª´ng k√Ω t·ª±');
        for (let i = 0; i < schoolName.length; i++) {
          schoolField.value = schoolName.substring(0, i + 1);
          
          // Trigger events cho t·ª´ng k√Ω t·ª±
          schoolField.dispatchEvent(new Event('input', { bubbles: true }));
          schoolField.dispatchEvent(new KeyboardEvent('keydown', {
            key: schoolName[i],
            bubbles: true
          }));
          
          // ƒê·ª£i m·ªôt ch√∫t gi·ªØa c√°c k√Ω t·ª± ƒë·ªÉ autocomplete c√≥ th·ªùi gian ph·∫£n h·ªìi
          await new Promise(resolve => setTimeout(resolve, 50));
        }
        
        // Trigger final events
        schoolField.dispatchEvent(new Event('input', { bubbles: true }));
        schoolField.dispatchEvent(new Event('change', { bubbles: true }));
        
        // Th√™m keyboard event ƒë·ªÉ trigger autocomplete dropdown
        schoolField.dispatchEvent(new KeyboardEvent('keydown', {
          key: 'ArrowDown',
          code: 'ArrowDown',
          bubbles: true
        }));
        
        console.log(`‚úÖ ƒê√£ ƒëi·ªÅn ƒë·∫ßy ƒë·ªß t√™n tr∆∞·ªùng: "${schoolName}"`);
        
        // B∆∞·ªõc 3: ƒê·ª£i dropdown hi·ªán ra ho√†n to√†n v·ªõi logic c·∫£i ti·∫øn
        console.log('‚è∞ B∆∞·ªõc 3: ƒê·ª£i dropdown load ho√†n to√†n...');
        
        return new Promise((resolve) => {
          let attempts = 0;
          const maxAttempts = 30; // TƒÉng t·ª´ 20 l√™n 30 (6 gi√¢y)
          let foundItemsCount = 0;
          let stableCount = 0; // ƒê·∫øm s·ªë l·∫ßn dropdown stable
          
          const checkForDropdown = () => {
            attempts++;
            
            // T√¨m t·∫•t c·∫£ items trong dropdown
            const allItemSelectors = [
              '.sid-college-name-item-0',
              '[id*="college-name-item-0"]',
              '[class*="college-name-item"]',
              '[class*="college-name-item"][data-index="0"]',
              '[role="option"]',
              '.dropdown-item',
              '.autocomplete-item',
              'li[data-index]',
              'div[data-index]',
              '.list-item',
              '.suggestion',
              '.option'
            ];
            
            // ƒê·∫øm t·∫•t c·∫£ items visible trong dropdown
            let totalItems = 0;
            let firstItem = null;
            
            for (const selector of allItemSelectors) {
              const items = document.querySelectorAll(selector);
              for (const item of items) {
                if (item.offsetParent !== null && item.textContent.trim()) {
                  totalItems++;
                  if (!firstItem) {
                    firstItem = item;
                  }
                }
              }
            }
            
            console.log(`üîç Attempt ${attempts}/${maxAttempts}: Found ${totalItems} dropdown items`);
            
            // Ki·ªÉm tra dropdown ƒë√£ stable ch∆∞a
            if (totalItems > 0) {
              if (totalItems === foundItemsCount) {
                stableCount++;
              } else {
                stableCount = 0; // Reset n·∫øu s·ªë l∆∞·ª£ng items thay ƒë·ªïi
                foundItemsCount = totalItems;
              }
              
              // N·∫øu dropdown ƒë√£ stable trong √≠t nh·∫•t 3 l·∫ßn check (600ms) v√† c√≥ √≠t nh·∫•t 1 item
              if (stableCount >= 3 && totalItems >= 1 && firstItem) {
                console.log(`‚úÖ Dropdown ƒë√£ stable v·ªõi ${totalItems} items, ch·ªçn item ƒë·∫ßu ti√™n`);
                
                // Debug th√¥ng tin c·ªßa item ƒë·∫ßu ti√™n
                console.log('üéØ Item ƒë·∫ßu ti√™n:', {
                  text: firstItem.textContent.trim(),
                  classes: firstItem.className,
                  id: firstItem.id,
                  visible: firstItem.offsetParent !== null
                });
                
                // Hover v√†o item ƒë·ªÉ highlight
                firstItem.dispatchEvent(new MouseEvent('mouseenter', { bubbles: true }));
                firstItem.dispatchEvent(new MouseEvent('mouseover', { bubbles: true }));
                
                // ƒê·ª£i 500ms ƒë·ªÉ ƒë·∫£m b·∫£o dropdown ho√†n to√†n s·∫µn s√†ng tr∆∞·ªõc khi click
                setTimeout(() => {
                  console.log('üñ±Ô∏è Click v√†o item ƒë·∫ßu ti√™n...');
                  firstItem.click();
                  firstItem.dispatchEvent(new MouseEvent('click', { bubbles: true }));
                  
                  // Verify click th√†nh c√¥ng
                  setTimeout(() => {
                    if (schoolField.value && schoolField.value.toLowerCase().includes(schoolName.toLowerCase().substring(0, 5))) {
                      console.log('‚úÖ School field ƒë√£ ƒë∆∞·ª£c ƒëi·ªÅn th√†nh c√¥ng:', schoolField.value);
                    } else {
                      console.log('‚ö†Ô∏è School field c√≥ th·ªÉ ch∆∞a ƒë∆∞·ª£c ƒëi·ªÅn ƒë√∫ng:', schoolField.value);
                    }
                  }, 200);
                  
                  resolve(true);
                }, 500);
                
                return;
              }
            }
            
            // Debug dropdown state m·ªói 10 attempts
            if (attempts % 10 === 0) {
              console.log('üîç Debug dropdown state:');
              const allPossibleItems = document.querySelectorAll('[class*="college"], [class*="item"], [role="option"], .dropdown *, .autocomplete *');
              let visibleCount = 0;
              allPossibleItems.forEach((item, index) => {
                if (item.offsetParent !== null && item.textContent.trim()) {
                  visibleCount++;
                  if (visibleCount <= 5) { // Ch·ªâ log 5 items ƒë·∫ßu ti√™n ƒë·ªÉ tr√°nh spam
                    console.log(`  Item ${visibleCount}:`, {
                      text: item.textContent.substring(0, 50),
                      classes: item.className,
                      selector: item.tagName + (item.id ? '#' + item.id : '') + (item.className ? '.' + item.className.split(' ')[0] : '')
                    });
                  }
                }
              });
              console.log(`üìä Total visible items: ${visibleCount}`);
            }
            
            // Ti·∫øp t·ª•c check n·∫øu ch∆∞a h·∫øt attempts
            if (attempts < maxAttempts) {
              setTimeout(checkForDropdown, 200);
            } else {
              console.log('‚è∞ Timeout - kh√¥ng t√¨m th·∫•y dropdown ·ªïn ƒë·ªãnh sau', maxAttempts * 200, 'ms');
              console.log('üîÑ Th·ª≠ click v√†o field m·ªôt l·∫ßn n·ªØa...');
              
              // Last attempt: th·ª≠ click l·∫°i v√† t√¨m b·∫•t k·ª≥ item n√†o
              schoolField.click();
              setTimeout(() => {
                const anyItem = document.querySelector('[role="option"], .dropdown-item, .autocomplete-item, .list-item');
                if (anyItem && anyItem.offsetParent !== null) {
                  console.log('üéØ Found fallback item, clicking...');
                  anyItem.click();
                  resolve(true);
                } else {
                  console.log('‚ùå No items found even after fallback');
                  resolve(false);
                }
              }, 500);
            }
          };
          
          // B·∫Øt ƒë·∫ßu check sau 500ms ƒë·ªÉ dropdown c√≥ th·ªùi gian xu·∫•t hi·ªán
          setTimeout(checkForDropdown, 500);
        });
      }
      
      // Th·ª≠ c√°c selector kh√°c nhau cho c√°c field kh√°c
      const fieldSelectors = {
        firstName: [
          '#sid-first-name', // SheerID specific
          'input[name="sid-first-name"]',
          'input[autocomplete="given-name"]',
          'input[name="firstName"]',
          'input[name="first_name"]',
          'input[name="first-name"]',
          'input[name="fname"]',
          'input[id*="first"]',
          'input[id*="fname"]',
          'input[id*="given"]',
          'input[placeholder*="first"]',
          'input[placeholder*="First"]',
          'input[placeholder*="given"]',
          'input[placeholder*="t√™n"]',
          'input[aria-label*="first"]',
          'input[aria-label*="First"]',
          'input[data-name*="first"]',
          'input[class*="first"]',
          'input[class*="fname"]',
          '#firstName',
          '#first_name',
          '#fname',
          '#given-name',
          // Fallback: any input after school that might be first name
          'form input[type="text"]:nth-of-type(2)',
          'form input:not([type]):nth-of-type(2)'
        ],
        lastName: [
          '#sid-last-name',
          'input[autocomplete="family-name"]',
          'input[name="lastName"]',
          'input[name="last_name"]',
          'input[id*="last"]',
          'input[id*="lname"]',
          'input[placeholder*="last"]',
          'input[placeholder*="h·ªç"]',
          '#lastName', 
          '#last_name',
          '#lname'
        ],
        email: [
          'input[autocomplete="email"]',
          'input[name="email"]',
          'input[type="email"]',
          'input[placeholder*="email"]',
          '#email'
        ]
      };

      
      
      // ƒêi·ªÅn country tr∆∞·ªõc, sau ƒë√≥ m·ªõi ƒëi·ªÅn school (async chain)
      fillCountryField(studentInfo.country || "Vietnam").then((countrySuccess) => {
        if (countrySuccess) {
          console.log('‚úÖ ƒê√£ ƒëi·ªÅn v√† ch·ªçn country th√†nh c√¥ng');
        } else {
          console.log('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y field country ho·∫∑c l·ªói khi ƒëi·ªÅn');
        }
        
        // Sau khi ƒëi·ªÅn xong country, ƒëi·ªÅn tr∆∞·ªùng h·ªçc
        return fillSchoolField(studentInfo.school);
      }).then((success) => {
        if (success) {
          console.log('ƒê√£ ƒëi·ªÅn v√† ch·ªçn tr∆∞·ªùng h·ªçc th√†nh c√¥ng');
        } else {
          console.log('L·ªói khi ƒëi·ªÅn tr∆∞·ªùng h·ªçc, fallback v·ªÅ c√°ch c≈©');
          fillField('input[id*="college"]', studentInfo.school);
        }
        
        // Sau ƒë√≥ ƒëi·ªÅn c√°c field kh√°c v·ªõi delay ƒë·ªÉ validation c√≥ th·ªùi gian x·ª≠ l√Ω
        console.log('üîç B·∫Øt ƒë·∫ßu ƒëi·ªÅn c√°c field name v√† email...');
        
        // ƒêi·ªÅn t·ª´ng field m·ªôt c√°ch tu·∫ßn t·ª± v·ªõi delay
        const fillFieldsSequentially = async () => {
          const fieldOrder = ['firstName', 'lastName', 'email'];
          
          for (const fieldName of fieldOrder) {
            const selectors = fieldSelectors[fieldName];
            const value = studentInfo[fieldName];
            
            if (!value) continue;
            
            console.log(`üîç ƒêang ƒëi·ªÅn ${fieldName}: ${value}`);
            
            let fieldFound = false;
            for (const selector of selectors) {
              const field = document.querySelector(selector);
              if (field && field.offsetParent !== null) {
                console.log(`‚úÖ T√¨m th·∫•y ${fieldName} field: ${selector}`);
                
                // Use enhanced fillField function
                const success = fillField(selector, value, fieldName);
                
                if (success) {
                  fieldFound = true;
                  break;
                }
              }
            }
            
            if (!fieldFound) {
              console.log(`‚ùå Kh√¥ng t√¨m th·∫•y field ${fieldName}`);
            }
            
            // Delay 300ms gi·ªØa c√°c field ƒë·ªÉ validation c√≥ th·ªùi gian x·ª≠ l√Ω
            await new Promise(resolve => setTimeout(resolve, 300));
          }
        };
        
        // Execute sequential fill v√† ƒë·ª£i ho√†n t·∫•t
        fillFieldsSequentially().then(async () => {
          console.log('‚úÖ ƒê√£ ƒëi·ªÅn xong t·∫•t c·∫£ c√°c field name v√† email');
          
          // Debug: In ra t·∫•t c·∫£ input fields tr√™n trang
          const allInputs = document.querySelectorAll('input');
          console.log('üîç DEBUG: T·∫•t c·∫£ input fields tr√™n trang:');
          allInputs.forEach((input, index) => {
            console.log(`Input ${index}:`, {
              id: input.id,
              name: input.name,
              type: input.type,
              autocomplete: input.autocomplete,
              placeholder: input.placeholder,
              className: input.className,
              ariaLabel: input.getAttribute('aria-label'),
              visible: input.offsetParent !== null,
              value: input.value
            });
          });
          
          // Debug ƒë·∫∑c bi·ªát cho First Name
          console.log('üîç FIRST NAME DEBUG: T√¨m t·∫•t c·∫£ field c√≥ th·ªÉ l√† First Name:');
          const potentialFirstNameFields = Array.from(allInputs).filter(input => {
            const searchText = (
              (input.id || '') + ' ' +
              (input.name || '') + ' ' +
              (input.placeholder || '') + ' ' +
              (input.className || '') + ' ' +
              (input.getAttribute('aria-label') || '') + ' ' +
              (input.autocomplete || '')
            ).toLowerCase();
            
            return searchText.includes('first') || 
                   searchText.includes('given') || 
                   searchText.includes('fname') ||
                   input.autocomplete === 'given-name';
          });
          
          console.log('üéØ Potential First Name fields found:', potentialFirstNameFields.length);
          potentialFirstNameFields.forEach((input, index) => {
            console.log(`First Name Candidate ${index}:`, {
              element: input,
              RECOMMENDED_SELECTOR: input.id ? `#${input.id}` : 
                                    input.name ? `input[name="${input.name}"]` :
                                    input.autocomplete ? `input[autocomplete="${input.autocomplete}"]` :
                                    `input[placeholder="${input.placeholder}"]`,
              id: input.id,
              name: input.name,
              placeholder: input.placeholder,
              autocomplete: input.autocomplete,
              visible: input.offsetParent !== null,
              value: input.value
            });
          });
          
          // X·ª≠ l√Ω Date of Birth v√† ƒê·ª¢I cho n√≥ ho√†n t·∫•t tr∆∞·ªõc khi submit
          if (studentInfo.dateOfBirth) {
            console.log('üîç B·∫Øt ƒë·∫ßu ƒëi·ªÅn Date of Birth...');
            try {
              await fillDateOfBirth(studentInfo.dateOfBirth);
              console.log('‚úÖ ƒê√£ ƒëi·ªÅn xong Date of Birth, ch·ªù 1 gi√¢y ƒë·ªÉ validation ho√†n t·∫•t...');
            } catch (error) {
              console.log('‚ö†Ô∏è L·ªói khi ƒëi·ªÅn Date of Birth:', error);
            }
            
            // Th√™m delay ƒë·ªÉ ƒë·∫£m b·∫£o Date of Birth ƒë∆∞·ª£c x·ª≠ l√Ω ho√†n t·∫•t
            await new Promise(resolve => setTimeout(resolve, 1000));
            console.log('‚úÖ Date of Birth validation ho√†n t·∫•t');
          } else {
            console.log('‚ÑπÔ∏è Kh√¥ng c√≥ Date of Birth ƒë·ªÉ ƒëi·ªÅn');
          }
          
          // B√¢y gi·ªù m·ªõi t√¨m v√† click n√∫t submit
          console.log('üîç T·∫•t c·∫£ fields ƒë√£ ƒë∆∞·ª£c ƒëi·ªÅn, t√¨m n√∫t Verify student status ƒë·ªÉ click...');
          
          const submitSelectors = [
            '#verify-status-text',
            'button[type="submit"]',
            'input[type="submit"]',
            'button:has-text("Submit")',
            'button:has-text("Verify")',
            'button:has-text("Continue")'
          ];
          
          let submitBtn = null;
          for (const selector of submitSelectors) {
            submitBtn = document.querySelector(selector);
            if (submitBtn) {
              console.log(`‚úÖ T√¨m th·∫•y n√∫t submit v·ªõi selector: ${selector}`, submitBtn);
              break;
            }
          }
          
          if (submitBtn) {
            console.log('T√¨m th·∫•y n√∫t submit:', submitBtn.textContent || submitBtn.id);
            
            // Highlight n√∫t tr∆∞·ªõc khi click (ƒë·ªÉ user bi·∫øt)
            submitBtn.style.border = '3px solid red';
            submitBtn.style.backgroundColor = '#ffeb3b';
            
            // ƒê·ª£i 2-3 gi√¢y r·ªìi t·ª± ƒë·ªông click
            setTimeout(() => {
              console.log('üöÄ T·ª± ƒë·ªông click n√∫t Verify student status...');
              submitBtn.click();
              console.log('‚úÖ ƒê√£ click v√†o n√∫t Verify student status');
              
              // Sau khi click, ƒë·ª£i trang load r·ªìi t√¨m n√∫t ti·∫øp theo
              setTimeout(() => {
                handlePostSubmitInSameTab();
              }, 3000);
            }, 2500); // 2.5 gi√¢y
            
          } else {
            console.log('‚ùå Kh√¥ng t√¨m th·∫•y n√∫t submit ƒë·ªÉ t·ª± ƒë·ªông click');
          }
        });
      });
      
      // Function x·ª≠ l√Ω sau khi submit trong c√πng tab
      function handlePostSubmitInSameTab() {
        console.log('üîç T√¨m n√∫t "Sign in to your school" ho·∫∑c "Upload Proof of Enrollment"...');
        
        function findAndClickButton() {
          // T√¨m n√∫t "Upload Proof of Enrollment" tr∆∞·ªõc
          const allButtons = document.querySelectorAll('button, a, [role="button"]');
          
          let uploadBtn = null;
          let signinBtn = null;
          
          // T√¨m "Upload Proof of Enrollment" theo text
          for (const btn of allButtons) {
            if (btn.textContent && btn.textContent.includes('Upload Proof of Enrollment')) {
              uploadBtn = btn;
            }
          }
          
          // T√¨m "Sign in to your school" theo ID v√† text
          signinBtn = document.querySelector('#sid-submit-btn-sso');
          if (!signinBtn || signinBtn.offsetParent === null) {
            // Fallback: t√¨m theo text n·∫øu kh√¥ng t√¨m th·∫•y ID
            for (const btn of allButtons) {
              if (btn.textContent && btn.textContent.includes('Sign in to your school')) {
                signinBtn = btn;
                break;
              }
            }
          }
          
          if (uploadBtn && uploadBtn.offsetParent !== null) {
            console.log('‚úÖ T√¨m th·∫•y n√∫t "Upload Proof of Enrollment", click lu√¥n...');
            uploadBtn.click();
            console.log('‚úÖ ƒê√£ click v√†o "Upload Proof of Enrollment"');
            return true;
          }
          
          if (signinBtn && signinBtn.offsetParent !== null) {
            console.log('‚úÖ T√¨m th·∫•y n√∫t "Sign in to your school" v·ªõi ID:', signinBtn.id || 'unknown');
            
            // Store current tab info tr∆∞·ªõc khi click
            const currentURL = window.location.href;
            
            signinBtn.click();
            console.log('‚úÖ ƒê√£ click v√†o "Sign in to your school"');
            
            // ƒê·ª£i m·ªôt ch√∫t r·ªìi check xem c√≥ tab m·ªõi kh√¥ng, n·∫øu c√≥ th√¨ ƒë√≥ng v√† quay l·∫°i
            setTimeout(() => {
              // N·∫øu URL v·∫´n nh∆∞ c≈©, c√≥ nghƒ©a l√† m·ªü tab m·ªõi
              if (window.location.href === currentURL) {
                console.log('üîÑ ƒê√£ m·ªü tab m·ªõi cho sign in, ƒë·ª£i n√∫t chuy·ªÉn th√†nh Upload...');
                // Retry t√¨m n√∫t "Upload Proof of Enrollment" sau m·ªôt v√†i gi√¢y
                setTimeout(() => {
                  retryFindUploadButton();
                }, 3000);
              }
            }, 1000);
            
            return 'signin_clicked';
          }
          
          return false;
        }
        
        function retryFindUploadButton() {
          let attempts = 0;
          const maxAttempts = 10;
          
          const retryInterval = setInterval(() => {
            attempts++;
            console.log(`üîÑ Th·ª≠ l·∫ßn ${attempts}/${maxAttempts} t√¨m n√∫t "Upload Proof of Enrollment"...`);
            
            const allButtons = document.querySelectorAll('button, a, [role="button"]');
            for (const btn of allButtons) {
              if (btn.textContent && btn.textContent.includes('Upload Proof of Enrollment') && btn.offsetParent !== null) {
                console.log('‚úÖ T√¨m th·∫•y n√∫t "Upload Proof of Enrollment" sau khi sign in!');
                btn.click();
                console.log('‚úÖ ƒê√£ click v√†o "Upload Proof of Enrollment"');
                clearInterval(retryInterval);
                return;
              }
            }
            
            if (attempts >= maxAttempts) {
              clearInterval(retryInterval);
              console.log('‚ùå Timeout - kh√¥ng t√¨m th·∫•y n√∫t "Upload Proof of Enrollment" sau sign in');
            }
          }, 1000);
        }
        
        // Th·ª≠ t√¨m ngay l·∫≠p t·ª©c
        const result = findAndClickButton();
        if (result === true) {
          return; // ƒê√£ t√¨m th·∫•y v√† click "Upload Proof of Enrollment"
        } else if (result === 'signin_clicked') {
          return; // ƒê√£ click "Sign in to your school", ƒëang ƒë·ª£i
        }
        
        // N·∫øu ch∆∞a t√¨m th·∫•y, th·ª≠ l·∫°i sau m·ªôt v√†i gi√¢y
        let attempts = 0;
        const maxAttempts = 10;
        
        const retryInterval = setInterval(() => {
          attempts++;
          console.log(`üîÑ Th·ª≠ l·∫ßn ${attempts}/${maxAttempts} t√¨m n√∫t...`);
          
          const result = findAndClickButton();
          if (result === true || result === 'signin_clicked') {
            clearInterval(retryInterval);
            return;
          }
          
          if (attempts >= maxAttempts) {
            clearInterval(retryInterval);
            console.log('‚ùå Timeout - kh√¥ng t√¨m th·∫•y n√∫t "Sign in to your school" ho·∫∑c "Upload Proof of Enrollment"');
          }
        }, 1000);
      }
    },
    args: [currentStudentInfo] // Truy·ªÅn studentInfo v√†o function
  }).catch(err => {
    console.error('L·ªói khi ƒëi·ªÅn form SheerID:', err);
  });
}

// X·ª≠ l√Ω l·ªói chung
chrome.runtime.onInstalled.addListener(() => {
  console.log('Student Card Auto Verifier ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t');
});
